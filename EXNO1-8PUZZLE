def print_board(board):
    for row in board:
        print(' '.join(map(str, row)))
    print()

def move(board, direction):
    empty_i, empty_j = find_empty(board)
    if direction == 'up' and empty_i > 0:
        board[empty_i][empty_j], board[empty_i - 1][empty_j] = board[empty_i - 1][empty_j], board[empty_i][empty_j]
    elif direction == 'down' and empty_i < len(board) - 1:
        board[empty_i][empty_j], board[empty_i + 1][empty_j] = board[empty_i + 1][empty_j], board[empty_i][empty_j]
    elif direction == 'left' and empty_j > 0:
        board[empty_i][empty_j], board[empty_i][empty_j - 1] = board[empty_i][empty_j - 1], board[empty_i][empty_j]
    elif direction == 'right' and empty_j < len(board[0]) - 1:
        board[empty_i][empty_j], board[empty_i][empty_j + 1] = board[empty_i][empty_j + 1], board[empty_i][empty_j]
    
    return board

def find_empty(board):
    for i, row in enumerate(board):
        for j, val in enumerate(row):
            if val == 0:
                return i, j

initial_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 0, 8]
]

goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

print("Initial State:")
print_board(initial_state)

print("Move 'up':")
print_board(move(initial_state, 'up'))

print("Move 'down':")
print_board(move(initial_state, 'down'))

print("Move 'left':")
print_board(move(initial_state, 'left'))

print("Move 'right':")
print_board(move(initial_state, 'right'))

print("Goal State:")
print_board(goal_state)
