from collections import deque

class State:
    def __init__(self, missionaries, cannibals, boat):
        self.missionaries = missionaries
        self.cannibals = cannibals
        self.boat = boat
    
    def is_valid(self):
        if self.missionaries < 0 or self.cannibals < 0 or self.missionaries > 3 or self.cannibals > 3:
            return False
        if self.missionaries < self.cannibals and self.missionaries > 0:
            return False
        if self.missionaries > self.cannibals and self.missionaries < 3:
            return False
        return True
    
    def is_goal(self):
        return self.missionaries == 0 and self.cannibals == 0 and self.boat == 0
    
    def __eq__(self, other):
        return self.missionaries == other.missionaries and self.cannibals == other.cannibals and self.boat == other.boat
    
    def __hash__(self):
        return hash((self.missionaries, self.cannibals, self.boat))

def get_neighbors(state):
    neighbors = []
    if state.boat == 0:
        new_state = State(state.missionaries, state.cannibals + 1, 1)
        if new_state.is_valid():
            neighbors.append(new_state)
        new_state = State(state.missionaries, state.cannibals + 2, 1)
        if new_state.is_valid():
            neighbors.append(new_state)
        new_state = State(state.missionaries + 1, state.cannibals, 1)
        if new_state.is_valid():
            neighbors.append(new_state)
        new_state = State(state.missionaries + 2, state.cannibals, 1)
        if new_state.is_valid():
            neighbors.append(new_state)
        new_state = State(state.missionaries + 1, state.cannibals + 1, 1)
        if new_state.is_valid():
            neighbors.append(new_state)
    else:
        new_state = State(state.missionaries, state.cannibals - 1, 0)
        if new_state.is_valid():
            neighbors.append(new_state)
        new_state = State(state.missionaries, state.cannibals - 2, 0)
        if new_state.is_valid():
            neighbors.append(new_state)
        new_state = State(state.missionaries - 1, state.cannibals, 0)
        if new_state.is_valid():
            neighbors.append(new_state)
        new_state = State(state.missionaries - 2, state.cannibals, 0)
        if new_state.is_valid():
            neighbors.append(new_state)
        new_state = State(state.missionaries - 1, state.cannibals - 1, 0)
        if new_state.is_valid():
            neighbors.append(new_state)
    return neighbors

def bfs():
    start_state = State(3, 3, 1)
    queue = deque([([], start_state)])
    visited = set()
    while queue:
        path, current_state = queue.popleft()
        if current_state.is_goal():
            return path + [current_state]
        visited.add(current_state)
        neighbors = get_neighbors(current_state)
        for neighbor in neighbors:
            if neighbor not in visited:
                queue.append((path + [current_state], neighbor))

def print_solution(solution):
    for state in solution:
        boat = "left" if state.boat == 1 else "right"
        print(f"{state.missionaries} missionaries and {state.cannibals} cannibals on the {boat} side")

solution = bfs()
print_solution(solution)
